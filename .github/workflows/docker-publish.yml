name: Docker Publish

on:
  # Run on pushes to the main branch and when new version tags are created.
  push:
    branches: [ "main" ]
    tags: [ 'v*.*.*' ]
  # Run builds on pull requests targeting the main branch to validate changes.
  pull_request:
    branches: [ "main" ]

env:
  # GitHub Container Registry
  REGISTRY_GHCR: ghcr.io
  IMAGE_NAME_GHCR: ${{ github.repository }}

  # Docker Hub Image Name (the user/org will be taken from secrets)
  IMAGE_NAME_DOCKERHUB: zfdash

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: read
      packages: write
      id-token: write # Required for ghcr.io authentication.

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_GHCR }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Docker Hub
        # Use an env var to check for the secret's presence.
        # This avoids a workflow error when secrets are not available, e.g. in PRs from forks.
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        if: github.event_name != 'pull_request' && env.DOCKERHUB_USERNAME != ''
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Prepare Docker Hub image name for metadata
        id: prep_dockerhub
        # Use the same condition as the login step to decide if we should generate the Docker Hub image name.
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        if: github.event_name != 'pull_request' && env.DOCKERHUB_USERNAME != ''
        run: echo "image_name=${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME_DOCKERHUB }}" >> $GITHUB_OUTPUT

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME_GHCR }}
            ${{ steps.prep_dockerhub.outputs.image_name }}
          tags: |
            # set latest tag for default branch
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
